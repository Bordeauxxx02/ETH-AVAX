// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract SmartContract {
    address public owner;
    uint public value;

    constructor() {
        owner = msg.sender;
        value = 100;
    }

    function setValue(uint _newValue) public {
        require(msg.sender == owner, "Only the owner can change the value");
        value = _newValue;
    }

    function requireExample(bool condition) public pure returns (string memory) {
        require(condition, "Require condition not met"); // This will revert if condition is false
        return "Require condition met";
    }

    function assertExample(uint a, uint b) public pure returns (uint) {
        assert(a == b); // This will trigger an assertion failure if a is not equal to b
        return a + b; // This line will not be executed
    }

    function revertExample(uint a, uint b) public pure returns (string memory) {
        if (a != b) {
            revert("a is not equal to b"); // This will revert the transaction
        }
        return "Execution completed"; // This line will not be executed
    }
}
